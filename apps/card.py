import sys
sys.path.insert(0, '/apps')

from apps import data_base
from apps import data_lessons
from apps.form_for_send_message import private_send_message
from apps import keyboards


#–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ —Å –æ—Ç–≤–µ—Ç–æ–º
def generating_a_question_with_an_answer(vk_session,user_id,msg,vk_api,lesson):
    question = data_lessons.questions(vk_session,user_id,msg,vk_api,lesson)
    answer = data_lessons.answer(user_id,lesson,question)
    if answer is not None:       
        answer = answer[0]
    data_lessons.update_last_sesson(user_id,lesson)
    return answer, question

#–∑–∞–ø–∏—Å—å –≤ –ë–î –æ—Ç–≤–µ—Ç–∞ –∏ –≤–æ–ø—Ä–æ—Å–∞
def question1(user_id,lesson,vk_session,msg,vk_api):
    answer ,question= generating_a_question_with_an_answer(vk_session,user_id,msg,vk_api,lesson)
    data_lessons.receiving_and_memory_answer_and_question(question,answer,user_id)
    if question is not None:
        private_send_message(vk_session, user_id, question, None, keyboards.check_Cards)
    
#–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω–æ
def question2(user_id,msg,vk_session):
    answer = data_lessons.getting_a_response(user_id)
    if answer is not None:
        answer = answer[0]
    if msg == answer and answer != "None":
        private_send_message(vk_session, user_id, "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤–µ—Ä–Ω–æüéâüéä", None, keyboards.delete_a_card_and_farther)
    elif msg != answer and answer != "None":
        private_send_message(vk_session, user_id, "–í—ã –Ω–µ –ø—Ä–∞–≤—ãü§∑‚Äç‚ôÇ\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: "+answer, None, keyboards.delete_a_card_and_farther)
        #data_lessons.delite_message(user_id)
    if answer == "None":
        answer = "yes"
    else:
        answer = "no"

    return answer

def cards(vk_session,user_id, msg, L_message, LL_message):

    lesson_now = data_base.getting_a_sequence(user_id)
    if lesson_now is not None:
        lesson_now = lesson_now[0]
    else:
        lesson_now = "None"

    #–§–∏–∑–∏–∫–∞ 
    if LL_message == "–§–∏–∑–∏–∫–∞" and lesson_now == "–§–∏–∑–∏–∫–∞2" and msg != "–ù–∞–∑–∞–¥":
        lesson = "physics"
        lesson_promo = "physics_promo"
        data_lessons.question_answer(msg,user_id,lesson,lesson_promo)
        private_send_message(vk_session, user_id, "–ó–∞–ø–∏—Å–∞–Ω–æüëç", None, keyboards.record_Cards)
        lesson_now = None
        data_base.sequence(user_id,lesson_now)
    else:
        if L_message == "–§–∏–∑–∏–∫–∞" and lesson_now == "–§–∏–∑–∏–∫–∞3" and msg != "–ù–∞–∑–∞–¥":
            lesson_promo = "physics_promo"
            data_lessons.promo_question(msg,user_id,lesson_promo)
            private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç", None, keyboards.record_Cards)
            lesson_now = "–§–∏–∑–∏–∫–∞2"
            data_base.sequence(user_id,lesson_now)
        else:
            if msg == "–§–∏–∑–∏–∫–∞" and lesson_now == "None":
                private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å", None, keyboards.record_Cards)
                lesson_now = "–§–∏–∑–∏–∫–∞3"
                data_base.sequence(user_id,lesson_now)
    
        
    #–ê–Ω–≥–ª–∏–π—Å–∫–∏–π
    if LL_message == "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" and lesson_now == "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π2" and msg != "–ù–∞–∑–∞–¥":
        lesson = "English"
        lesson_promo = "English_promo"
        data_lessons.question_answer(msg,user_id,lesson,lesson_promo)
        private_send_message(vk_session, user_id, "–ó–∞–ø–∏—Å–∞–Ω–æüëç", None, keyboards.record_Cards)
        lesson_now = None
        data_base.sequence(user_id,lesson_now)
    else:
        if L_message == "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" and lesson_now == "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π3" and msg != "–ù–∞–∑–∞–¥":
            lesson_promo = "English_promo"
            data_lessons.promo_question(msg,user_id,lesson_promo)
            private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç", None, keyboards.record_Cards)
            lesson_now = "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π2"
            data_base.sequence(user_id,lesson_now)
        else:
            if msg == "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" and lesson_now == "None":
                private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å", None, keyboards.record_Cards)
                lesson_now = "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π3"
                data_base.sequence(user_id,lesson_now)
    
    #–ë–∏–æ–ª–æ–≥–∏—è
    if LL_message == "–ë–∏–æ–ª–æ–≥–∏—è" and lesson_now == "–ë–∏–æ–ª–æ–≥–∏—è2" and msg != "–ù–∞–∑–∞–¥":
        lesson = "biology"
        lesson_promo = "biology_promo"
        data_lessons.question_answer(msg,user_id,lesson,lesson_promo)
        private_send_message(vk_session, user_id, "–ó–∞–ø–∏—Å–∞–Ω–æüëç", None, keyboards.record_Cards)
        lesson_now = None
        data_base.sequence(user_id,lesson_now)
    else:
        if L_message == "–ë–∏–æ–ª–æ–≥–∏—è" and lesson_now == "–ë–∏–æ–ª–æ–≥–∏—è3"  and msg != "–ù–∞–∑–∞–¥":
            lesson_promo = "biology_promo"
            data_lessons.promo_question(msg,user_id,lesson_promo)
            private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç", None, keyboards.record_Cards)
            lesson_now = "–ë–∏–æ–ª–æ–≥–∏—è2"
            data_base.sequence(user_id,lesson_now)
                
        else:
            if msg == "–ë–∏–æ–ª–æ–≥–∏—è" and lesson_now == "None":
                private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å", None, keyboards.record_Cards)
                lesson_now = "–ë–∏–æ–ª–æ–≥–∏—è3"
                data_base.sequence(user_id,lesson_now)

    
    #–ò—Å—Ç–æ—Ä–∏—è
    if LL_message == "–ò—Å—Ç–æ—Ä–∏—è" and lesson_now == "–ò—Å—Ç–æ—Ä–∏—è2" and msg != "–ù–∞–∑–∞–¥":
        lesson = "history"
        lesson_promo = "history_promo"
        data_lessons.question_answer(msg,user_id,lesson,lesson_promo)
        private_send_message(vk_session, user_id, "–ó–∞–ø–∏—Å–∞–Ω–æüëç", None, keyboards.record_Cards)
        lesson_now = None
        data_base.sequence(user_id,lesson_now)
    else:
        if L_message == "–ò—Å—Ç–æ—Ä–∏—è" and lesson_now == "–ò—Å—Ç–æ—Ä–∏—è3" and msg != "–ù–∞–∑–∞–¥":
            lesson_promo = "history_promo"
            data_lessons.promo_question(msg,user_id,lesson_promo)
            private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç", None, keyboards.record_Cards)
            lesson_now = "–ò—Å—Ç–æ—Ä–∏—è2"
            data_base.sequence(user_id,lesson_now)
        else:
            if msg == "–ò—Å—Ç–æ—Ä–∏—è" and lesson_now == "None":
                private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å", None, keyboards.record_Cards)
                lesson_now = "–ò—Å—Ç–æ—Ä–∏—è3"
                data_base.sequence(user_id,lesson_now)

    #–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞
    if LL_message == "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞" and lesson_now == "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞2" and msg != "–ù–∞–∑–∞–¥":
        lesson = "literature"
        lesson_promo = "literature_promo"
        data_lessons.question_answer(msg,user_id,lesson,lesson_promo)
        private_send_message(vk_session, user_id, "–ó–∞–ø–∏—Å–∞–Ω–æüëç", None, keyboards.record_Cards)
        lesson_now = None
        data_base.sequence(user_id,lesson_now)
    else:
        if L_message == "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞" and lesson_now == "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞3" and msg != "–ù–∞–∑–∞–¥":
            lesson_promo = "literature_promo"
            data_lessons.promo_question(msg,user_id,lesson_promo)
            private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç", None, keyboards.record_Cards)
            lesson_now = "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞2"
            data_base.sequence(user_id,lesson_now)

        else:
            if msg == "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞" and lesson_now == "None":
                private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å", None, keyboards.record_Cards)
                lesson_now = "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞3"
                data_base.sequence(user_id,lesson_now)

    #–º—É–∑—ã–∫–∞
    if LL_message == "–ú—É–∑—ã–∫–∞"and lesson_now == "–ú—É–∑—ã–∫–∞2" and msg != "–ù–∞–∑–∞–¥":
        lesson = "music"
        lesson_promo = "music_promo"
        data_lessons.question_answer(msg,user_id,lesson,lesson_promo)
        private_send_message(vk_session, user_id, "–ó–∞–ø–∏—Å–∞–Ω–æüëç", None, keyboards.record_Cards)
        lesson_now = None
        data_base.sequence(user_id,lesson_now)
    else:
        if L_message == "–ú—É–∑—ã–∫–∞" and lesson_now == "–ú—É–∑—ã–∫–∞3" and msg != "–ù–∞–∑–∞–¥":
            lesson_promo = "music_promo"
            data_lessons.promo_question(msg,user_id,lesson_promo)
            private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç", None, keyboards.record_Cards)
            lesson_now = "–ú—É–∑—ã–∫–∞2"
            data_base.sequence(user_id,lesson_now)    
        else:
            if msg == "–ú—É–∑—ã–∫–∞" and lesson_now == "None":
                private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å", None, keyboards.record_Cards)
                lesson_now = "–ú—É–∑—ã–∫–∞3"
                data_base.sequence(user_id,lesson_now)

    #–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π
    if LL_message == "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" and lesson_now == "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π2" and msg != "–ù–∞–∑–∞–¥":
        lesson = "French"
        lesson_promo = "French_promo"
        data_lessons.question_answer(msg,user_id,lesson,lesson_promo)
        private_send_message(vk_session, user_id, "–ó–∞–ø–∏—Å–∞–Ω–æüëç", None, keyboards.record_Cards)
        lesson_now = None
        data_base.sequence(user_id,lesson_now)
    else:
        if L_message == "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" and lesson_now == "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π3" and msg != "–ù–∞–∑–∞–¥":
            lesson_promo = "French_promo"
            data_lessons.promo_question(msg,user_id,lesson_promo)
            private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç", None, keyboards.record_Cards)
            lesson_now = "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π2"
            data_base.sequence(user_id,lesson_now)   
    
        else:
            if msg == "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" and lesson_now == "None":
                private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å", None, keyboards.record_Cards)
                lesson_now = "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π3"
                data_base.sequence(user_id,lesson_now)   


    
    #–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–µ–Ω–∏–µ
    if LL_message == "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–µ–Ω–∏–µ" and lesson_now == "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–µ–Ω–∏–µ2" and msg != "–ù–∞–∑–∞–¥":
        lesson = "social_studies"
        lesson_promo = "social_studies_promo"
        data_lessons.question_answer(msg,user_id,lesson,lesson_promo)
        private_send_message(vk_session, user_id, "–ó–∞–ø–∏—Å–∞–Ω–æüëç", None, keyboards.record_Cards)
        lesson_now = None
        data_base.sequence(user_id,lesson_now) 
    else:
        if L_message == "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–µ–Ω–∏–µ" and lesson_now == "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–µ–Ω–∏–µ3" and msg != "–ù–∞–∑–∞–¥":
            lesson_promo = "social_studies_promo"
            data_lessons.promo_question(msg,user_id,lesson_promo)
            private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç", None, keyboards.record_Cards)
            lesson_now = "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–µ–Ω–∏–µ2"
            data_base.sequence(user_id,lesson_now)     
        else:
            if msg == "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–µ–Ω–∏–µ" and lesson_now == "None":
                private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å", None, keyboards.record_Cards)
                lesson_now = "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–µ–Ω–∏–µ3"
                data_base.sequence(user_id,lesson_now) 
    
    #–†—É—Å—Å–∫–∏–π
    if LL_message == "–†—É—Å—Å–∫–∏–π" and lesson_now == "–†—É—Å—Å–∫–∏–π2" and msg != "–ù–∞–∑–∞–¥":
        lesson = "Russian"
        lesson_promo = "Russian_promo"
        data_lessons.question_answer(msg,user_id,lesson,lesson_promo)
        private_send_message(vk_session, user_id, "–ó–∞–ø–∏—Å–∞–Ω–æüëç", None, keyboards.record_Cards)
        lesson_now = None
        data_base.sequence(user_id,lesson_now) 
    else:
        if L_message == "–†—É—Å—Å–∫–∏–π" and lesson_now == "–†—É—Å—Å–∫–∏–π3" and msg != "–ù–∞–∑–∞–¥":
            lesson_promo = "Russian_promo"
            data_lessons.promo_question(msg,user_id,lesson_promo)
            private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç", None, keyboards.record_Cards)
            lesson_now = "–†—É—Å—Å–∫–∏–π2"
            data_base.sequence(user_id,lesson_now) 
    
        else:
            if msg == "–†—É—Å—Å–∫–∏–π" and lesson_now == "None":
                private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å", None, keyboards.record_Cards)
                lesson_now = "–†—É—Å—Å–∫–∏–π3"
                data_base.sequence(user_id,lesson_now) 


    #–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞
    if LL_message == "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞" and lesson_now == "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞2" and msg != "–ù–∞–∑–∞–¥":
        lesson = "physical_education"
        lesson_promo = "physical_education_promo"
        data_lessons.question_answer(msg,user_id,lesson,lesson_promo)
        private_send_message(vk_session, user_id, "–ó–∞–ø–∏—Å–∞–Ω–æüëç", None, keyboards.record_Cards)
        lesson_now = None
        data_base.sequence(user_id,lesson_now) 
    else:
        if L_message == "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞" and lesson_now == "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞3" and msg != "–ù–∞–∑–∞–¥":
            lesson_promo = "physical_education_promo"
            data_lessons.promo_question(msg,user_id,lesson_promo)
            private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç", None, keyboards.record_Cards)
            lesson_now = "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞2"
            data_base.sequence(user_id,lesson_now)     
        else:
            if msg == "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞" and lesson_now == "None":
                private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å", None, keyboards.record_Cards)
                lesson_now = "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞3"
                data_base.sequence(user_id,lesson_now) 
        
    #–•–∏–º–∏—è
    if LL_message == "–•–∏–º–∏—è" and lesson_now == "–•–∏–º–∏—è2" and msg != "–ù–∞–∑–∞–¥":
        lesson = "chemistry"
        lesson_promo = "chemistry_promo"
        data_lessons.question_answer(msg,user_id,lesson,lesson_promo)
        private_send_message(vk_session, user_id, "–ó–∞–ø–∏—Å–∞–Ω–æüëç", None, keyboards.record_Cards)
        lesson_now = None
        data_base.sequence(user_id,lesson_now) 
    else:
        if L_message == "–•–∏–º–∏—è" and lesson_now == "–•–∏–º–∏—è3" and msg != "–ù–∞–∑–∞–¥":
            lesson_promo = "chemistry_promo"
            data_lessons.promo_question(msg,user_id,lesson_promo)
            private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç", None, keyboards.record_Cards)
            lesson_now = "–•–∏–º–∏—è2"
            data_base.sequence(user_id,lesson_now)  
        else:
            if msg == "–•–∏–º–∏—è" and lesson_now == "None":
                private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å", None, keyboards.record_Cards)
                lesson_now = "–•–∏–º–∏—è3"
                data_base.sequence(user_id,lesson_now) 
    #–ê–ª–≥–µ–±—Ä–∞
    if LL_message == "–ê–ª–≥–µ–±—Ä–∞" and lesson_now == "–ê–ª–≥–µ–±—Ä–∞2" and msg != "–ù–∞–∑–∞–¥":
        lesson = "algebra"
        lesson_promo = "algebra_promo"
        data_lessons.question_answer(msg,user_id,lesson,lesson_promo)
        private_send_message(vk_session, user_id, "–ó–∞–ø–∏—Å–∞–Ω–æüëç", None, keyboards.record_Cards)
        lesson_now = None
        data_base.sequence(user_id,lesson_now) 
    else:
        if L_message == "–ê–ª–≥–µ–±—Ä–∞" and lesson_now == "–ê–ª–≥–µ–±—Ä–∞3" and msg != "–ù–∞–∑–∞–¥":
            lesson_promo = "algebra_promo"
            data_lessons.promo_question(msg,user_id,lesson_promo)
            private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç", None, keyboards.record_Cards)
            lesson_now = "–ê–ª–≥–µ–±—Ä–∞2"
            data_base.sequence(user_id,lesson_now) 
        else:
            if msg == "–ê–ª–≥–µ–±—Ä–∞" and lesson_now == "None":
                private_send_message(vk_session, user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã", None, keyboards.record_Cards)
                lesson_now = "–ê–ª–≥–µ–±—Ä–∞3"
                data_base.sequence(user_id,lesson_now) 



def checking_the_answer(user_id, msg, L_message,vk_session,vk_api):

    lesson = data_base.getting_a_sequence(user_id)

    if lesson is not None:
        lesson = lesson[0]
    else:
        lesson = "None"


    if msg == "—Ç–§–∏–∑–∏–∫–∞" or L_message == "—Ç–§–∏–∑–∏–∫–∞" and msg != "–ù–∞–∑–∞–¥":
        if lesson == "physics" or lesson == "None":
            if L_message == "—Ç–§–∏–∑–∏–∫–∞" and lesson == "physics":
                answer = question2(user_id,msg,vk_session)
                lesson = None
                data_base.sequence(user_id,lesson)
                return answer

            if msg == "—Ç–§–∏–∑–∏–∫–∞" and lesson == "None":
                lesson = "physics"
                data_base.sequence(user_id,lesson)
                question1(user_id,lesson,vk_session,msg,vk_api)
                answer = "yes"
                return answer
            
            else:
                if msg == "—Ç–§–∏–∑–∏–∫–∞":
                    lesson = "physics"
                    question1(user_id,lesson,vk_session,msg,vk_api)
    
    if msg == "—Ç–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" or L_message == "—Ç–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" and msg != "–ù–∞–∑–∞–¥":
        if lesson == "English" or lesson == "None":
            if L_message == "—Ç–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" and lesson == "English":
                answer = question2(user_id,msg,vk_session)
                lesson = None
                data_base.sequence(user_id,lesson)
                return answer

            if msg == "—Ç–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" and lesson == "None":
                lesson = "English"
                data_base.sequence(user_id,lesson)
                question1(user_id,lesson,vk_session,msg,vk_api)
                answer = "yes"
                return answer
            
            else:
                if msg == "—Ç–ê–Ω–≥–ª–∏–π—Å–∫–∏–π":
                    lesson = "English"
                    question1(user_id,lesson,vk_session,msg,vk_api)

    if msg == "—Ç–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞" or L_message == "—Ç–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞" and msg != "–ù–∞–∑–∞–¥":
        if lesson == "literature" or lesson == "None":
            if L_message == "—Ç–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞" and lesson == "literature":
                answer = question2(user_id,msg,vk_session)
                lesson = None
                data_base.sequence(user_id,lesson)
                return answer

            if msg == "—Ç–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞" and lesson == "None":
                lesson = "literature"
                data_base.sequence(user_id,lesson)
                question1(user_id,lesson,vk_session,msg,vk_api)
                answer = "yes"
                return answer

            else:
                if msg == "—Ç–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞":
                    lesson = "literature"
                    question1(user_id,lesson,vk_session,msg,vk_api)
    


    if msg == "—Ç–ë–∏–æ–ª–æ–≥–∏—è" or L_message == "—Ç–ë–∏–æ–ª–æ–≥–∏—è" and msg != "–ù–∞–∑–∞–¥":
        if lesson == "biology" or lesson == "None":
            if L_message == "—Ç–ë–∏–æ–ª–æ–≥–∏—è" and lesson == "biology":
                answer = question2(user_id,msg,vk_session)
                lesson = None
                data_base.sequence(user_id,lesson)
                return answer

            if msg == "—Ç–ë–∏–æ–ª–æ–≥–∏—è" and lesson == "None":
                lesson = "biology"
                data_base.sequence(user_id,lesson)
                question1(user_id,lesson,vk_session,msg,vk_api)
                answer = "yes"
                return answer

            else:
                if msg == "—Ç–ë–∏–æ–ª–æ–≥–∏—è":
                    lesson = "biology"
                    question1(user_id,lesson,vk_session,msg,vk_api)

    if msg == "—Ç–ú—É–∑—ã–∫–∞" or L_message == "—Ç–ú—É–∑—ã–∫–∞" and msg != "–ù–∞–∑–∞–¥":
        if lesson == "music" or lesson == "None":
            if L_message == "—Ç–ú—É–∑—ã–∫–∞" and lesson == "music":
                answer = question2(user_id,msg,vk_session)
                lesson = None
                data_base.sequence(user_id,lesson)
                return answer

            if msg == "—Ç–ú—É–∑—ã–∫–∞" and lesson == "None":
                lesson = "music"
                data_base.sequence(user_id,lesson)
                question1(user_id,lesson,vk_session,msg,vk_api)
                answer = "yes"
                return answer
            
            else:
                if msg == "—Ç–ú—É–∑—ã–∫–∞":
                    lesson = "music"
                    question1(user_id,lesson,vk_session,msg,vk_api)

    if msg == "—Ç–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ" or L_message == "—Ç–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ" and msg != "–ù–∞–∑–∞–¥":
        if lesson == "social_studies" or lesson == "None":
            if L_message == "—Ç–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ" and lesson == "social_studies":
                answer = question2(user_id,msg,vk_session)
                lesson = None
                data_base.sequence(user_id,lesson)
                return answer

            if msg == "—Ç–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ" and lesson == "None":
                lesson = "social_studies"
                data_base.sequence(user_id,lesson)
                question1(user_id,lesson,vk_session,msg,vk_api)
                answer = "yes"
                return answer
            
            else:
                if msg == "—Ç–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ":
                    lesson = "social_studies"
                    question1(user_id,lesson,vk_session,msg,vk_api)

    if msg == "—Ç–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞" or L_message == "—Ç–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞" and msg != "–ù–∞–∑–∞–¥":
        if lesson == "physical_education" or lesson == "None":
            if L_message == "—Ç–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞" and lesson == "physical_education":
                answer = question2(user_id,msg,vk_session)
                lesson = None
                data_base.sequence(user_id,lesson)
                return answer

            if msg == "—Ç–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞" and lesson == "None":
                lesson = "physical_education"
                data_base.sequence(user_id,lesson)
                question1(user_id,lesson,vk_session,msg,vk_api)
                answer = "yes"
                return answer

            else:
                if msg == "—Ç–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞":
                    lesson = "physical_education"
                    question1(user_id,lesson,vk_session,msg,vk_api)
    

    
    if msg == "—Ç–†—É—Å—Å–∫–∏–π" or L_message == "—Ç–†—É—Å—Å–∫–∏–π" and msg != "–ù–∞–∑–∞–¥":
        if lesson == "Russian" or lesson == "None":
            if L_message == "—Ç–†—É—Å—Å–∫–∏–π" and lesson == "Russian":
                answer = question2(user_id,msg,vk_session)
                lesson = None
                data_base.sequence(user_id,lesson)
                return answer   

            if msg == "—Ç–†—É—Å—Å–∫–∏–π" and lesson == "None":
                lesson = "Russian"
                data_base.sequence(user_id,lesson)
                question1(user_id,lesson,vk_session,msg,vk_api)
                answer = "yes"
                return answer

            else:
                if msg == "—Ç–†—É—Å—Å–∫–∏–π":
                    lesson = "Russian"
                    question1(user_id,lesson,vk_session,msg,vk_api)

    if msg == "—Ç–•–∏–º–∏—è" or L_message == "—Ç–•–∏–º–∏—è" and msg != "–ù–∞–∑–∞–¥":
        if lesson == "chemistry" or lesson == "None":
            if L_message == "—Ç–•–∏–º–∏—è" and lesson == "chemistry":
                answer = question2(user_id,msg,vk_session)
                lesson = None
                data_base.sequence(user_id,lesson)
                return answer

            if msg == "—Ç–•–∏–º–∏—è" and lesson == "None":
                lesson = "chemistry"
                data_base.sequence(user_id,lesson)
                question1(user_id,lesson,vk_session,msg,vk_api)
                answer = "yes"
                return answer

            else:
                if msg == "—Ç–•–∏–º–∏—è":
                    lesson = "chemistry"
                    question1(user_id,lesson,vk_session,msg,vk_api)
    
    if msg == "—Ç–ò—Å—Ç–æ—Ä–∏—è" or L_message == "—Ç–ò—Å—Ç–æ—Ä–∏—è" and msg != "–ù–∞–∑–∞–¥":
        if lesson == "history" or lesson == "None":
            if L_message == "—Ç–ò—Å—Ç–æ—Ä–∏—è" and lesson == "history":
                answer = question2(user_id,msg,vk_session)
                lesson = None
                data_base.sequence(user_id,lesson)
                return answer

            if msg == "—Ç–ò—Å—Ç–æ—Ä–∏—è" and lesson == "None":
                lesson = "history"
                data_base.sequence(user_id,lesson)
                question1(user_id,lesson,vk_session,msg,vk_api)
                answer = "yes"
                return answer

            else:
                if msg == "—Ç–ò—Å—Ç–æ—Ä–∏—è":
                    lesson = "history"
                    question1(user_id,lesson,vk_session,msg,vk_api)

    if msg == "—Ç–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" or L_message == "—Ç–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" and msg != "–ù–∞–∑–∞–¥":
        if lesson == "French" or lesson == "None":
            if L_message == "—Ç–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" and lesson == "French":
                answer = question2(user_id,msg,vk_session)
                lesson = None
                data_base.sequence(user_id,lesson)
                return answer

            if msg == "—Ç–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" and lesson == "None":
                lesson = "French"
                data_base.sequence(user_id,lesson)
                question1(user_id,lesson,vk_session,msg,vk_api)
                answer = "yes"
                return answer

            else:
                if msg == "—Ç–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π":
                    lesson = "French"
                    question1(user_id,lesson,vk_session,msg,vk_api)

    
    if msg == "—Ç–ê–ª–≥–µ–±—Ä–∞" or L_message == "—Ç–ê–ª–≥–µ–±—Ä–∞" and msg != "–ù–∞–∑–∞–¥":
        if lesson == "algebra" or lesson == "None":
            if L_message == "—Ç–ê–ª–≥–µ–±—Ä–∞" and lesson == "algebra":
                answer = question2(user_id,msg,vk_session)
                lesson = None
                data_base.sequence(user_id,lesson)
                return answer

            if msg == "—Ç–ê–ª–≥–µ–±—Ä–∞" and lesson == "None":
                lesson = "algebra"
                data_base.sequence(user_id,lesson)
                question1(user_id,lesson,vk_session,msg,vk_api)
                answer = "yes"
                return answer

            else:
                if msg == "—Ç–ê–ª–≥–µ–±—Ä–∞":
                    lesson = "algebra"
                    question1(user_id,lesson,vk_session,msg,vk_api)


    else:
        answer ,question = data_lessons.checkanswerandquestion(user_id)
        answer = answer[0]
        question = question[0]
        if question == "None" and answer == "None":
            data_lessons.del_answer_question(user_id)


#—Ñ–∏–∫—Å –∫—É—á–∏ –æ—à–∏–±–æ–∫
def grebanaya_proverka_12if(msg,L_message,user_id):
    lesson_now = None

    if msg == "—Ç–ê–Ω–≥–ª–∏–π—Å–∫–∏–π":
        if L_message == "—Ç–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" or L_message == "—Ç–ë–∏–æ–ª–æ–≥–∏—è" or L_message == "—Ç–ê–ª–≥–µ–±—Ä–∞" or L_message == "—Ç–ò—Å—Ç–æ—Ä–∏—è" or L_message == "—Ç–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞" or L_message == "—Ç–ú—É–∑—ã–∫–∞" or L_message == "—Ç–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞" or L_message == "—Ç–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" or L_message == "—Ç–§–∏–∑–∏–∫–∞" or L_message == "—Ç–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ" or L_message == "—Ç–†—É—Å—Å–∫–∏–π" or L_message == "—Ç–•–∏–º–∏—è":
            data_base.sequence(user_id,lesson_now)
        
    elif msg == "—Ç–ë–∏–æ–ª–æ–≥–∏—è":
        if L_message == "—Ç–ë–∏–æ–ª–æ–≥–∏—è" or L_message == "—Ç–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" or L_message == "—Ç–ê–ª–≥–µ–±—Ä–∞" or L_message == "—Ç–ò—Å—Ç–æ—Ä–∏—è" or L_message == "—Ç–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞" or L_message == "—Ç–ú—É–∑—ã–∫–∞" or L_message == "—Ç–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞" or L_message == "—Ç–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" or L_message == "—Ç–§–∏–∑–∏–∫–∞" or L_message == "—Ç–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ" or L_message == "—Ç–†—É—Å—Å–∫–∏–π" or L_message == "—Ç–•–∏–º–∏—è":
            data_base.sequence(user_id,lesson_now)

    elif msg == "—Ç–ê–ª–≥–µ–±—Ä–∞":
        if L_message == "—Ç–ê–ª–≥–µ–±—Ä–∞" or L_message == "—Ç–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" or L_message == "—Ç–ë–∏–æ–ª–æ–≥–∏—è" or L_message == "—Ç–ò—Å—Ç–æ—Ä–∏—è" or L_message == "—Ç–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞" or L_message == "—Ç–ú—É–∑—ã–∫–∞" or L_message == "—Ç–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞" or L_message == "—Ç–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" or L_message == "—Ç–§–∏–∑–∏–∫–∞" or L_message == "—Ç–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ" or L_message == "—Ç–†—É—Å—Å–∫–∏–π" or L_message == "—Ç–•–∏–º–∏—è":
            data_base.sequence(user_id,lesson_now)
    
    elif msg == "—Ç–ò—Å—Ç–æ—Ä–∏—è":
        if L_message == "—Ç–ò—Å—Ç–æ—Ä–∏—è" or L_message == "—Ç–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" or L_message == "—Ç–ë–∏–æ–ª–æ–≥–∏—è" or L_message == "—Ç–ê–ª–≥–µ–±—Ä–∞" or L_message == "—Ç–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞" or L_message == "—Ç–ú—É–∑—ã–∫–∞" or L_message == "—Ç–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞" or L_message == "—Ç–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" or L_message == "—Ç–§–∏–∑–∏–∫–∞" or L_message == "—Ç–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ" or L_message == "—Ç–†—É—Å—Å–∫–∏–π" or L_message == "—Ç–•–∏–º–∏—è":
            data_base.sequence(user_id,lesson_now)
    
    elif msg == "—Ç–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞":
        if L_message == "—Ç–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞" or L_message == "—Ç–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" or L_message == "—Ç–ë–∏–æ–ª–æ–≥–∏—è" or L_message == "—Ç–ê–ª–≥–µ–±—Ä–∞" or L_message == "—Ç–ò—Å—Ç–æ—Ä–∏—è" or L_message == "—Ç–ú—É–∑—ã–∫–∞" or L_message == "—Ç–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞" or L_message == "—Ç–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" or L_message == "—Ç–§–∏–∑–∏–∫–∞" or L_message == "—Ç–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ" or L_message == "—Ç–†—É—Å—Å–∫–∏–π" or L_message == "—Ç–•–∏–º–∏—è":
            data_base.sequence(user_id,lesson_now)
        
    elif msg == "—Ç–ú—É–∑—ã–∫–∞":
        if L_message == "—Ç–ú—É–∑—ã–∫–∞" or L_message == "—Ç–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" or L_message == "—Ç–ë–∏–æ–ª–æ–≥–∏—è" or L_message == "—Ç–ê–ª–≥–µ–±—Ä–∞" or L_message == "—Ç–ò—Å—Ç–æ—Ä–∏—è" or L_message == "—Ç–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞" or L_message == "—Ç–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞" or L_message == "—Ç–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" or L_message == "—Ç–§–∏–∑–∏–∫–∞" or L_message == "—Ç–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ" or L_message == "—Ç–†—É—Å—Å–∫–∏–π" or L_message == "—Ç–•–∏–º–∏—è":
            data_base.sequence(user_id,lesson_now)
        
    elif msg == "—Ç–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞":
        if L_message == "—Ç–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞" or L_message == "—Ç–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" or L_message == "—Ç–ë–∏–æ–ª–æ–≥–∏—è" or L_message == "—Ç–ê–ª–≥–µ–±—Ä–∞" or L_message == "—Ç–ò—Å—Ç–æ—Ä–∏—è" or L_message == "—Ç–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞" or L_message == "—Ç–ú—É–∑—ã–∫–∞" or L_message == "—Ç–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" or L_message == "—Ç–§–∏–∑–∏–∫–∞" or L_message == "—Ç–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ" or L_message == "—Ç–†—É—Å—Å–∫–∏–π" or L_message == "—Ç–•–∏–º–∏—è":
            data_base.sequence(user_id,lesson_now)
        
    elif msg == "—Ç–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π":
        if L_message == "—Ç–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" or L_message == "—Ç–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" or L_message == "—Ç–ë–∏–æ–ª–æ–≥–∏—è" or L_message == "—Ç–ê–ª–≥–µ–±—Ä–∞" or L_message == "—Ç–ò—Å—Ç–æ—Ä–∏—è" or L_message == "—Ç–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞" or L_message == "—Ç–ú—É–∑—ã–∫–∞" or L_message == "—Ç–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞" or L_message == "—Ç–§–∏–∑–∏–∫–∞" or L_message == "—Ç–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ" or L_message == "—Ç–†—É—Å—Å–∫–∏–π" or L_message == "—Ç–•–∏–º–∏—è":
            data_base.sequence(user_id,lesson_now)
    
    elif msg == "—Ç–§–∏–∑–∏–∫–∞":
        if L_message == "—Ç–§–∏–∑–∏–∫–∞" or L_message == "—Ç–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" or L_message == "—Ç–ë–∏–æ–ª–æ–≥–∏—è" or L_message == "—Ç–ê–ª–≥–µ–±—Ä–∞" or L_message == "—Ç–ò—Å—Ç–æ—Ä–∏—è" or L_message == "—Ç–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞" or L_message == "—Ç–ú—É–∑—ã–∫–∞" or L_message == "—Ç–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞" or L_message == "—Ç–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" or L_message == "—Ç–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ" or L_message == "—Ç–†—É—Å—Å–∫–∏–π" or L_message == "—Ç–•–∏–º–∏—è":
            data_base.sequence(user_id,lesson_now)
        
    elif msg == "—Ç–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ":
        if L_message == "—Ç–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ" or L_message == "—Ç–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" or L_message == "—Ç–ë–∏–æ–ª–æ–≥–∏—è" or L_message == "—Ç–ê–ª–≥–µ–±—Ä–∞" or L_message == "—Ç–ò—Å—Ç–æ—Ä–∏—è" or L_message == "—Ç–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞" or L_message == "—Ç–ú—É–∑—ã–∫–∞" or L_message == "—Ç–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞" or L_message == "—Ç–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" or L_message == "—Ç–§–∏–∑–∏–∫–∞" or L_message == "—Ç–†—É—Å—Å–∫–∏–π" or L_message == "—Ç–•–∏–º–∏—è":
            data_base.sequence(user_id,lesson_now)
    
    elif msg == "—Ç–†—É—Å—Å–∫–∏–π":
        if L_message == "—Ç–†—É—Å—Å–∫–∏–π" or L_message == "—Ç–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" or L_message == "—Ç–ë–∏–æ–ª–æ–≥–∏—è" or L_message == "—Ç–ê–ª–≥–µ–±—Ä–∞" or L_message == "—Ç–ò—Å—Ç–æ—Ä–∏—è" or L_message == "—Ç–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞" or L_message == "—Ç–ú—É–∑—ã–∫–∞" or L_message == "—Ç–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞" or L_message == "—Ç–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" or L_message == "—Ç–§–∏–∑–∏–∫–∞" or L_message == "—Ç–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ" or L_message == "—Ç–•–∏–º–∏—è":
            data_base.sequence(user_id,lesson_now)
        
    elif msg == "—Ç–•–∏–º–∏—è":
        if L_message == "—Ç–•–∏–º–∏—è" or L_message == "—Ç–ê–ª–≥–µ–±—Ä–∞" or L_message == "—Ç–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" or L_message == "—Ç–ë–∏–æ–ª–æ–≥–∏—è" or L_message == "—Ç–ê–ª–≥–µ–±—Ä–∞" or L_message == "—Ç–ò—Å—Ç–æ—Ä–∏—è" or L_message == "—Ç–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞" or L_message == "—Ç–ú—É–∑—ã–∫–∞" or L_message == "—Ç–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞" or L_message == "—Ç–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" or L_message == "—Ç–§–∏–∑–∏–∫–∞" or L_message == "—Ç–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ" or L_message == "—Ç–†—É—Å—Å–∫–∏–π":
            data_base.sequence(user_id,lesson_now)
            